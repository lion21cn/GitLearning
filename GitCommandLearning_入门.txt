GIT 最基本命令

1. 初始化一个本地仓库  新建为 master主分支

git init
2.查看当前分支状态
git status  

3.将文件更改添加到分支状态中 相当于文件等待被提交

git add  <文件名>   

4.提交并添加描述信息

git commit -m <"描述信息"> 

5.查看分支   前面带*号的为当前所在分支

git branch  

6.新建分支

git branch <分支名称>  

7.切换分支

git checkout <分支名>  

8.新建分支并切换到此分支

git checkout -b <分支名>  

9.将指定分支名合并到当前分支  一般为切换到主分支使用此命令

git merge <分支名>   

10.合并分支并提交

git merge --no-ff -m "提交描述" <分支名>   

11.删除分支

git branch -d <分支名>  有新建分支，那肯定有删除分支，假如这个分支新建错了，或者a分支的代码已经顺利合并到 master 分支来了，那么a分支没用了，需要删除，这个时候执行 git branch -d a 就可以把a分支删除了

12.强制删除分支
git branch -D <分支名>  强制删除分支，不管分支是否有未提交合并的代码

13.查看所有标签
git tag 

14.查看所有标签

git tag <标签名> 在当前状态下新建一个标签，可用来当作版本号使用

15.在指定的提交状态下新建一个标签

git tag -a <标签名称> -m <"标签描述"> <提交id>  在指定的提交状态下新建一个标签

16.查看标签的详情

git show <标签名称>   查看标签的详情

17. 删除标签

git tag -d <标签名>

18.推送标签到远程仓库

git push origin <标签名>   

19.推送所有未推送的标签

git push origin --tags  推送所有未推送的标签

20.删除远程标签，本地要先删除后才可以

git push origin :refs/tags/<标签名>   

21.切换到标签名指定的状态

git checkout <标签名> 

22.查看文件修改内容

git diff <文件名> 

23.查看提交日志   --pretty=oneline  此参数减少输出信息  穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

git log

24.查看所有分支的所有操作记录   
   
git reflog  

25.
git log --graph --pretty=oneline --abbrev-commit   查看分支合并图
git reset --hard <HEAD^||提交ID> 穿梭到指定提交版本
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

git checkout -- <文件名>  将指定的文件恢复到最近一次 commit或add操作时候的状态
git reset HEAD <文件名>   将指定的文件从暂存区的修改撤销掉（unstage），重新放回工作区
git rm <文件名>		 删除指定的文件

git stash  把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list 查看暂存状态
git stash apply 恢复暂存状态
git stash drop  删除暂存状态
git stash pop   恢复并删除暂存状态
git stash apply <stash@{0}>  恢复指定的暂存状态

